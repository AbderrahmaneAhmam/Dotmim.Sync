jobs:
  - job: testpostgrestcp31
    displayName: "PostgreSQL .Net Core 3.1"

    pool:
      # get an Ubuntu image to be able to get the light SQL container
      vmImage: "ubuntu-latest" # "Ubuntu 16.04" # "ubuntu-latest" # 'VS2017-Win2016'

    variables:
      solution: "**/*.sln"
      buildPlatform: "Any CPU"
      buildConfiguration: "Release"

    steps:
      - task: UseDotNet@2
        displayName: 'Use .Net Core sdk'
        inputs:
          version: 3.x
          
      - task: UseDotNet@2
        displayName: 'Use .Net Sdk 6.x'
        inputs:
          packageType: 'sdk'
          version: 6.0.x
          includePreviewVersions: true

      - task: UseDotNet@2
        displayName: 'Use .Net Sdk 7.x'
        inputs:
          packageType: 'sdk'
          version: 7.0.x
          includePreviewVersions: true  
                    
      - script: docker run --name sqlserver -e ACCEPT_EULA=Y -e SA_PASSWORD=Password12! -p 1433:1433 -d mcr.microsoft.com/mssql/server
        displayName: "Run SQL Server latest on Linux container"
 
      - script: docker run --name postgres -e POSTGRES_PASSWORD=Password12! -p 5432:5432 -d postgres:latest
        displayName: "Run PostgreSQL on Linux container"

      - script: dotnet test Tests/Dotmim.Sync.Tests/Dotmim.Sync.Tests.csproj --filter Dotmim.Sync.Tests.IntegrationTests.PostgresTcp -f netcoreapp3.1 --logger trx
        name: postgrestcptests
        displayName: "PostgreSQL Tcp Integration Tests"
        continueOnError: true
        env:
          "AZUREDEV": "true"

      - task: PublishTestResults@2
        inputs:
          testRunner: VSTest
          testResultsFiles: "**/*.trx"

  - job: testpostgrestcp7
    displayName: "PostgreSQL .Net 7"

    pool:
      # get an Ubuntu image to be able to get the light SQL container
      vmImage: "ubuntu-latest" # "Ubuntu 16.04" # "ubuntu-latest" # 'VS2017-Win2016'

    variables:
      solution: "**/*.sln"
      buildPlatform: "Any CPU"
      buildConfiguration: "Release"

    steps:
      - task: UseDotNet@2
        displayName: 'Use .Net Core sdk'
        inputs:
          version: 3.x

      - task: UseDotNet@2
        displayName: 'Use .Net Sdk 6.x'
        inputs:
          packageType: 'sdk'
          version: 6.0.x
          includePreviewVersions: true

      - task: UseDotNet@2
        displayName: 'Use .Net Sdk 7.x'
        inputs:
          packageType: 'sdk'
          version: 7.0.x
          includePreviewVersions: true          
          
      - script: docker run --name sqlserver -e ACCEPT_EULA=Y -e SA_PASSWORD=Password12! -p 1433:1433 -d mcr.microsoft.com/mssql/server
        displayName: "Run SQL Server latest on Linux container"
 
      - script: docker run --name postgres -e POSTGRES_PASSWORD=Password12! -p 5432:5432 -d postgres:latest
        displayName: "Run PostgreSQL on Linux container"

      - script: dotnet test Tests/Dotmim.Sync.Tests/Dotmim.Sync.Tests.csproj --filter Dotmim.Sync.Tests.IntegrationTests.PostgresTcp -f net7.0 --logger trx
        name: postgrestcptests
        displayName: "PostgreSQL Tcp Integration Tests"
        continueOnError: true
        env:
          "AZUREDEV": "true"

      - task: PublishTestResults@2
        inputs:
          testRunner: VSTest
          testResultsFiles: "**/*.trx"

  - job: testpostgreshttp7
    displayName: "PostgreSQL HTTP .Net 7"

    pool:
      # get an Ubuntu image to be able to get the light SQL container
      vmImage: "ubuntu-latest" # "Ubuntu 16.04" # "ubuntu-latest" # 'VS2017-Win2016'

    variables:
      solution: "**/*.sln"
      buildPlatform: "Any CPU"
      buildConfiguration: "Release"

    steps:
      - task: UseDotNet@2
        displayName: 'Use .Net Core sdk'
        inputs:
          version: 3.x

      - task: UseDotNet@2
        displayName: 'Use .Net Sdk 6.x'
        inputs:
          packageType: 'sdk'
          version: 6.0.x
          includePreviewVersions: true

      - task: UseDotNet@2
        displayName: 'Use .Net Sdk 7.x'
        inputs:
          packageType: 'sdk'
          version: 7.0.x
          includePreviewVersions: true          
          
      - script: docker run --name sqlserver -e ACCEPT_EULA=Y -e SA_PASSWORD=Password12! -p 1433:1433 -d mcr.microsoft.com/mssql/server
        displayName: "Run SQL Server latest on Linux container"
 
      - script: docker run --name postgres -e POSTGRES_PASSWORD=Password12! -p 5432:5432 -d postgres:latest
        displayName: "Run PostgreSQL on Linux container"

      - script: dotnet test Tests/Dotmim.Sync.Tests/Dotmim.Sync.Tests.csproj --filter Dotmim.Sync.Tests.IntegrationTests.PostgresHttp -f net7.0 --logger trx
        name: postgreshttptests
        displayName: "PostgreSQL Http Integration Tests"
        continueOnError: true
        env:
          "AZUREDEV": "true"

      - task: PublishTestResults@2
        inputs:
          testRunner: VSTest
          testResultsFiles: "**/*.trx"


    displayName: "Release Nuget Packages"

    # dependsOn: Tests
    # condition: succeeded('Tests')

    # Pool on a VS 2017 image to be able to compile for .Net 4.6
    pool:
      vmImage: "ubuntu-latest"

    variables:
      buildConfiguration: "Release"
      artifactName: "release"

    steps:
      - task: UseDotNet@2
        displayName: 'Use .Net Core sdk'
        inputs:
          version: 3.x

      # Use the latest .NET SDK
      - task: UseDotNet@2
        displayName: 'Use .Net Sdk 6.x'
        inputs:
          packageType: 'sdk'
          version: 6.0.x
          includePreviewVersions: true

      - task: UseDotNet@2
        displayName: 'Use .Net Sdk 7.x'
        inputs:
          packageType: 'sdk'
          version: 7.0.x
          includePreviewVersions: true

      - script: |
          dotnet build Projects/Dotmim.Sync.Core/Dotmim.Sync.Core.csproj -c $(buildConfiguration) 
          dotnet pack Projects/Dotmim.Sync.Core/Dotmim.Sync.Core.csproj -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)/Dotmim.Sync.Core
        displayName: "release nuget Dotmim.Sync.Core"
        continueOnError: true
      - script: |
          dotnet build Projects/Dotmim.Sync.SqlServer/Dotmim.Sync.SqlServer.csproj -c $(buildConfiguration)  
          dotnet pack Projects/Dotmim.Sync.SqlServer/Dotmim.Sync.SqlServer.csproj -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)/Dotmim.Sync.SqlServer   
        displayName: "release nuget Dotmim.Sync.SqlServer"
        continueOnError: true
      - script: |
          dotnet build Projects/Dotmim.Sync.SqlServer.ChangeTracking/Dotmim.Sync.SqlServer.ChangeTracking.csproj -c $(buildConfiguration) 
          dotnet pack Projects/Dotmim.Sync.SqlServer.ChangeTracking/Dotmim.Sync.SqlServer.ChangeTracking.csproj -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)/Dotmim.Sync.SqlServerChangeTracking   
        displayName: "release nuget Dotmim.Sync.SqlServerChangeTracking"
        continueOnError: true
      - script: |
          dotnet build Projects/Dotmim.Sync.MySql/Dotmim.Sync.MySql.csproj -c $(buildConfiguration)  
          dotnet pack Projects/Dotmim.Sync.MySql/Dotmim.Sync.MySql.csproj -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)/Dotmim.Sync.MySql  
        displayName: "release nuget Dotmim.Sync.MySql"
        continueOnError: true
      - script: |
          dotnet build Projects/Dotmim.Sync.MariaDB/Dotmim.Sync.MariaDB.csproj -c $(buildConfiguration) 
          dotnet pack Projects/Dotmim.Sync.MariaDB/Dotmim.Sync.MariaDB.csproj -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)/Dotmim.Sync.MariaDB  
        displayName: "release nuget Dotmim.Sync.MariaDB"
        continueOnError: true
      - script: |
          dotnet build Projects/Dotmim.Sync.Sqlite/Dotmim.Sync.Sqlite.csproj -c $(buildConfiguration) 
          dotnet pack Projects/Dotmim.Sync.Sqlite/Dotmim.Sync.Sqlite.csproj -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)/Dotmim.Sync.Sqlite  
        displayName: "release nuget Dotmim.Sync.Sqlite"
        continueOnError: true
      - script: |
          dotnet build Projects/Dotmim.Sync.PostgreSql/Dotmim.Sync.PostgreSql.csproj -c $(buildConfiguration)
          dotnet pack Projects/Dotmim.Sync.PostgreSql/Dotmim.Sync.PostgreSql.csproj -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)/Dotmim.Sync.PostgreSql
        displayName: "beta nuget Dotmim.Sync.PostgreSql"
        continueOnError: true
      - script: |
          dotnet build Projects/Dotmim.Sync.Web.Client/Dotmim.Sync.Web.Client.csproj -c $(buildConfiguration) 
          dotnet pack Projects/Dotmim.Sync.Web.Client/Dotmim.Sync.Web.Client.csproj -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)/Dotmim.Sync.Web.Client 
        displayName: "release nuget Dotmim.Sync.Web.Client"
        continueOnError: true
      - script: |
          dotnet build Projects/Dotmim.Sync.Web.Server/Dotmim.Sync.Web.Server.csproj -c $(buildConfiguration) 
          dotnet pack Projects/Dotmim.Sync.Web.Server/Dotmim.Sync.Web.Server.csproj -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)/Dotmim.Sync.Web.Server 
        displayName: "release nuget Dotmim.Sync.Web.Server"
        continueOnError: true


    # Publish Build Artifacts
      - task: PublishBuildArtifacts@1
        inputs:
          artifactName: $(artifactName)